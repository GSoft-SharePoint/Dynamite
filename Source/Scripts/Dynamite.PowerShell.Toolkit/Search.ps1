#
# Module 'Dynamite.PowerShell.Toolkit'
# Generated by: GSoft, Team Dynamite.
# Generated on: 10/24/2013
# > GSoft & Dynamite : http://www.gsoft.com
# > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
# > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
#

<#
	.SYNOPSIS
		Add the Managed Properties base on the definitions in the XML input

	.DESCRIPTION
		Add the Managed Properties base on the definitions in the XML input

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
    
	.PARAMETER  XmlPath
		A path to the XML file defining the Properties to insert. Here's the schema:
    
    <?xml version="1.0" encoding="utf-8"?>
    <Properties>
      <Property Name="owstaxIdDynamiteLanguage" Type="1" FullTextQueriable="true" Queryable="true" Retrievable="true" Searchable="true" Refinable="true" SafeForAnonymous="true" >
        <CrawledProperties>
          <CrawledProperty Name="ows_DynamiteLanguage"/>
          <CrawledProperty Name="ows_taxId_DynamiteLanguage"/>
        </CrawledProperties>
      </Property>
      ...
    </Properties>
    
	.PARAMETER  SearchServiceApplicationName
		The Name of the Search Service Application

	.EXAMPLE
		PS C:\> Add-DSPMetadataManagedPropertiesByKeyword -XmlPath ./schema.xml -SearchServiceApplicationName "Search Service Application"

	.INPUTS
		System.String,System.String

	.OUTPUTS
		Nothing (Logging when -Verbose)
        
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
    
  .NOTES
   Type Reference
    1 = Text
    2 = Integer
    3 = Decimal
    4 = DateTime
    5 = YesNo
    6 = Binary
    7 = Double
   
   Naming Conventions: (as per http://technet.microsoft.com/en-us/library/jj613136.aspx)

    Crawled Property :
    * Spaces are removed from the site column name, and then the following prefixes are added to the site column name to create the crawled property name:
    	* For site columns of type Publishing HTML and Multiple line of text: ows_r_<four letter code>_
    	* For site columns of type Managed Metadata: ows_taxId_
    	* For all other site column types: ows_q_<four letter code>_
    Managed Property :
    * Spaces are removed from the site column name, and the following items are added to the site column name to create the managed property name:
    	* For all site columns of type Managed Metadata, the following prefix is added: owstaxId
    	* For all other site column types, the following suffix is added: OWS <four letter code>

    Examples :
    	
    Site column type                    Crawled property name        Managed property name
    _____________________________________________________________________________________
    Single line of text                 ows_q_TEXT_SiteColumnName    SiteColumnNameOWSTEXT
    Multiple lines of text              ows_r_MTXT_SiteColumnName    SiteColumnNameOWSMTXT
    Choice                              ows_q_CHCS_SiteColumnName    SiteColumnNameOWSCHCS
    Choice (allow multiple selections)  ows_q_CHCM_SiteColumnName    SiteColumnNameOWSCHCM
    Number                              ows_q_NMBR_SiteColumnName    SiteColumnNameOWSNMBR
    Currency                            ows_q_CURR_SiteColumnName    SiteColumnNameOWSCURR
    Date and Time                       ows_q_DATE_SiteColumnName    SiteColumnNameOWSDATE
    Yes/No                              ows_q_BOOL_SiteColumnName    SiteColumnNameOWSBOOL
    Person or Group                     ows_q_USER_SiteColumnName    SiteColumnNameOWSUSER
    Hyperlink or Picture                ows_q_URLH_SiteColumnName    SiteColumnNameOWSURHL
    Publishing HTML                     ows_r_HTML_SiteColumnName    SiteColumnNameOWSHTML
    Publishing Image                    ows_q_IMGE_SiteColumnName    SiteColumnNameOWSIMGE
    Publishing Link                     ows_q_LINK_SiteColumnName    SiteColumnNameOWSLINK
    Managed Metadata                    ows_taxId_SiteColumnName    owstaxIdSiteColumnName
    Integer*                            ows_q_INTG_SiteColumnName    SiteColumnNameOWSINTG
    GUID*                               ows_q_GUID_SiteColumnName    SiteColumnNameOWSGUID
    Grid Choice*                        ows_q_CHCG_SiteColumnName    SiteColumnNameOWSCHCG
    ContentTypeIDFieldType*             ows_q_CTID_SiteColumnName    SiteColumnNameOWSCTID
    SPS average rating                  ows_q_RAVG_SiteColumnName    SiteColumnNameOWSRAVG
    SPS rating count                    ows_q_RCNT_SiteColumnName    SiteColumnNameOWSRCNT
#>
function Add-DSPMetadataManagedPropertiesByXml() {
	[CmdletBinding()]
	Param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$XmlPath,
		
		[Parameter(Mandatory=$true, Position=1)]
		[string]$SearchServiceApplicationName
	)	
	Write-Verbose "Entering Add-DSPMetadataManagedPropertiesByXml with following Search Service : $SearchServiceApplicationName"
	
	$Properties = [xml](Get-Content $XmlPath)
	
	if (($Properties -ne $null) -and ($SearchServiceApplicationName -ne $null))
	{	
		$SearchServiceApplication = Get-SPEnterpriseSearchServiceApplication -Identity $SearchServiceApplicationName

		if ($SearchServiceApplication -eq $null)
		{
			Write-Host ([string]::Format("The Search Service Application named {0} do not exist", $SearchServiceApplicationName)) -ForegroundColor Magenta
		}
		else
		{
			Write-Verbose ([string]::Format("Search Service Application named {0} was found.", $SearchServiceApplicationName)) -ForegroundColor green

			foreach ($xmlProperty in $Properties.Properties.Property)
			{	
				$mp = Get-SPEnterpriseSearchMetadataManagedProperty -Identity $xmlProperty.Name -SearchApplication $SearchServiceApplication -ErrorAction SilentlyContinue

				if ($mp -eq $null)
				{
          # Get Parameters
					$FullTextQueriable = Get-BooleanValue -Value $xmlProperty.FullTextQueriable -DefaultValue $true
					$Queryable = Get-BooleanValue -Value $xmlProperty.Queryable -DefaultValue $true
					$Retrievable = Get-BooleanValue -Value $xmlProperty.Retrievable -DefaultValue $true
					$SafeForAnonymous = Get-BooleanValue -Value $xmlProperty.SafeForAnonymous -DefaultValue $true
					$Refinable = Get-BooleanValue -Value $xmlProperty.Refinable -DefaultValue $true
					$RespectPriority = Get-BooleanValue -Value $xmlProperty.RespectPriority -DefaultValue $false
					
					$mp = New-SPEnterpriseSearchMetadataManagedProperty -SearchApplication $SearchServiceApplication -Name $xmlProperty.Name -Type $xmlProperty.Type -FullTextQueriable $FullTextQueriable -NameNormalized $true -Queryable $Queryable -RemoveDuplicates $false -Retrievable $Retrievable -SafeForAnonymous $SafeForAnonymous -RespectPriority $RespectPriority
					Write-Verbose "Managed Property named " -nonewline -ForegroundColor green
					Write-Verbose $xmlProperty.Name -nonewline -ForegroundColor Magenta
					Write-Verbose " was successfully created." -ForegroundColor green
					
					$mp.Refinable = $Refinable
					$mp.Update()

					# Set Associated Group
					if ($xmlProperty.CrawledProperties -ne $null)
					{
						foreach ($xmlCrawledProperty in $xmlProperty.CrawledProperties.CrawledProperty)
						{
							$cp = Get-SPEnterpriseSearchMetadataCrawledProperty -SearchApplication $SearchServiceApplication -Name $xmlCrawledProperty.Name
							
							if ($cp -ne $null)
							{
								$mapping = New-SPEnterpriseSearchMetadataMapping -CrawledProperty $cp -ManagedProperty $mp -SearchApplication $SearchServiceApplication
								Write-Host "Mapping for crawled property named " -nonewline -ForegroundColor green
								Write-Host $cp.Name -nonewline 
								Write-Host " was successfully created." -ForegroundColor green
							}
							else
							{
								Write-Host ([string]::Format("The crawled property named {0} do not exist", $xmlCrawledProperty.Name)) -ForegroundColor Magenta
							}
						}
					}
				}
				else
				{
					Write-Host ([string]::Format("The Managed Property with the name `"{0}`" already exists.",  $xmlProperty.Name)) -ForegroundColor Magenta
				}
			}
		}
	}
	else
	{
		Write-Host "There is no managed properties to add." -ForegroundColor green
	}
}

<#
	.SYNOPSIS
		Remove the Managed Properties based on a search on a common keyword.

	.DESCRIPTION
		Remove the Managed Properties based on a search on a common keyword.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
    
	.PARAMETER  Keyword
		A keyword common in all the Managed Properties names. Usually a prefix.
    When you create the SiteColumn, a good practice is to prefix them. This come helpfull here, when you need to remove a batch of Managed Properties to recreate them with the proper type.

	.PARAMETER  SearchServiceApplicationName
		The Name of the Search Service Application

	.EXAMPLE
		PS C:\> Remove-DSPMetadataManagedPropertiesByKeyword -Keyword "myPrefix" -SearchServiceApplicationName "Search Service Application"

	.INPUTS
		System.String,System.String

	.OUTPUTS
		Nothing (Logging when -Verbose)
        
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Remove-DSPMetadataManagedPropertiesByKeyword() {

	[CmdletBinding()]
	Param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$Keyword,
		
		[Parameter(Mandatory=$true, Position=1)]
		[string]$SearchServiceApplicationName
	)	
	Write-Verbose "Entering Add-DSPMetadataManagedPropertiesByXml with following Search Service : $SearchServiceApplicationName"
	
	$SearchServiceApplication = Get-SPEnterpriseSearchServiceApplication -Identity $SearchServiceApplicationName
	
	$ManagedPropeties = Get-SPEnterpriseSearchMetadataManagedProperty -SearchApplication $SearchServiceApplication | where { $_.Name -like "*$Keyword*" }

	foreach ($ManagedProperty in $ManagedPropeties) 
	{
		$Mappings = Get-SPEnterpriseSearchMetadataMapping -SearchApplication $SearchServiceApplication -ManagedProperty $ManagedProperty

		Write-Host "Deleting mappings for Managed Property" $ManagedProperty.Name

		foreach ($Mapping in $Mappings)
		{
			Remove-SPEnterpriseSearchMetadataMapping -SearchApplication $SearchServiceApplication -Identity $Mapping -Confirm:$false 
		}
		
		Write-Host "Deleting Managed Property" $ManagedProperty.Name
		Remove-SPEnterpriseSearchMetadataManagedProperty -SearchApplication $SearchServiceApplication -Identity $ManagedProperty.Name -Confirm:$false 
	}
}

<#
	.SYNOPSIS
		Method to add file type to the index

	.DESCRIPTION
		Method to add file type to the index

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
    
	.PARAMETER  Extensions
		A list of Extensions ex: @("jpg", "jpeg", "png", "gif", "bmp")

	.PARAMETER  SearchServiceApplicationName
		The Name of the Search Service Application

	.EXAMPLE
		PS C:\> Add-DSPCrawlExtension -Extensions @("jpg", "jpeg", "png", "gif", "bmp") -SearchServiceApplicationName "Search Service Application"

	.INPUTS
		System.String[] ex: @("jpg", "jpeg", "png", "gif", "bmp"), System.String

	.OUTPUTS
		No output (Logging when -Verbose)
        
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
Function Add-DSPCrawlExtension()
{
	[CmdletBinding()]
	Param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string[]]$Extensions,
		
		[Parameter(Mandatory=$true, Position=1)]
		[string]$SearchServiceApplicationName
	)
  
	$SearchServiceApplication = Get-SPEnterpriseSearchServiceApplication -Identity $SearchServiceApplicationName
	
	If ($SearchServiceApplication)
	{	
		Write-Verbose "We found the following Search Service Application: $searchApplication"
		Foreach ($extension in $extensions)
		{
			Try
			{
				Get-SPEnterpriseSearchCrawlExtension -SearchApplication $SearchServiceApplication -Identity $extension -ErrorAction Stop | Out-Null
				Write-Verbose "'$extension' file extension already set for $($searchApplication.DisplayName)."
			}
			Catch
			{
				New-SPEnterpriseSearchCrawlExtension -SearchApplication $SearchServiceApplication -Name $extension | Out-Null
				Write-Verbose "'$extension' extension for $($searchApplication.DisplayName) now set."
			}
		}
	}
	Else 
	{
		Write-Verbose "No search application found."
	}
}